package main

import "fmt"

/*
《为结构体添加方法》

	1.语法
		// TODO (对象 对象类型)：表示此方法是为某个结构体添加的方法
		// (对象 对象类型)称为方法的接收者，
		// 接收者可以是【指针类型】也可以是【值类型】，但通常对于包含大型数据或需要修改其字段的结构体，使用指针接收者更为常见。

		func (对象 结构体类型) 方法名(参数列表)(方法返回值){
				......
		}

	2.方法调用
		对象名.方法名()

    3.注意事项（形参选择【值】或【指针】类型问题？）
		① 当方法需要修改接收者的字段时，应该使用指针接收者。
		② 如果方法不需要修改接收者，但接收者是一个大型结构体，出于性能考虑，也可以考虑使用指针接收者来避免不必要的值拷贝。
		③ 方法的接收者类型（值或指针）对于方法的可调用性有影响。
			例如，如果你有一个值接收者的方法，你可以通过一个值或指向该值的指针来调用它。
			但是，如果你有一个指针接收者的方法，你只能通过一个指向结构体的指针来调用它。
*/

type Cat struct {
	name string
	age  float64
}

// 为结构体添加打印对象信息的方法
// 值类型
func (c Cat) PrintCat() {
	fmt.Println("cat=", c)
}

// 指针类型（当方法需要修改接收者的字段时，应该使用指针接收者。）
func (cp *Cat) UpdateInfo() {
	cp.name = "呼噜阿"
}

func main() {
	// 1.结构体信息打印
	cat1 := Cat{name: "臭皮皮", age: 4}
	// 结构体方法调用（对象.方法）
	cat1.PrintCat()

	cat2 := Cat{name: "大呼噜", age: 4.5}
	// 结构体方法调用（对象.方法）
	cat2.PrintCat() // cat= {大呼噜 4.5}
	cat2.UpdateInfo()
	cat2.PrintCat() // cat= {呼噜阿 4.5}

	// 2.结构体成员变量值修改

}
