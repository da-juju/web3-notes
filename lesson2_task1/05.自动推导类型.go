package main

import "fmt"

/*
Go中的类型推导

	在Go中，当你使用var关键字声明变量并立即为其赋值时，或者当你使用短变量声明（:=）时，编译器会自动推断变量的类型。

1、使用var关键字和类型推导

	var x = 42     // x的类型被推断为int
	var y = 3.14   // y的类型被推断为float64
	var z = "hello" // z的类型被推断为string
	注意，尽管这里没有显式指定类型，但变量x、y和z仍然有明确的类型，这些类型是由编译器根据它们的初始值推断出来的。

2、使用短变量声明（:=）：

	a := 42     // a的类型被推断为int
	b := 3.14   // b的类型被推断为float64
	c := "world" // c的类型被推断为string
	使用短变量声明时，你甚至不需要写var关键字。编译器会根据右侧的表达式自动推断出左侧变量的类型。

3、类型推导使得Go代码更加简洁和易读。它减少了重复的类型声明，并降低了因类型不匹配而导致的编译错误的风险。

	同时，它也使得代码更加灵活，因为你可以更容易地改变变量的类型而不需要修改大量的类型声明。
*/
func main() {
	// 1、使用var关键字和类型推导
	var x = 42      // x的类型被推断为int
	var y = 3.14    // y的类型被推断为float64
	var z = "hello" // z的类型被推断为string
	fmt.Println(x, y, z)

	// 2、使用短变量声明（:=）：
	a := 42      // a的类型被推断为int
	b := 3.14    // b的类型被推断为float64
	c := "world" // c的类型被推断为string
	fmt.Println(a, b, c)

	// 3、使用短变量,多重赋值
	m, n, t := 10, 11, 12
	fmt.Print(m, n, t)
}
